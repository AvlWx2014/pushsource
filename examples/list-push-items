#!/usr/bin/env python
import logging
import attr
from argparse import ArgumentParser
import subprocess

import yaml

from pushsource import Source

log = logging.getLogger("list-push-items")


# This is an example of registering a source which delegates to another.
Source.register_backend(
    "fedkoji", Source.get_partial("koji:https://koji.fedoraproject.org/kojihub")
)
Source.register_backend(
    "brew",
    Source.get_partial(
        "koji:https://brewhub.engineering.redhat.com/brewhub/?basedir=/mnt/brew"
    ),
)

# Here's another example - note that it's even possible to overwrite an existing backend!
Source.register_backend(
    "errata",
    Source.get_partial("errata:https://errata.devel.redhat.com?koji_source=brew:"),
)


def format_python(item):
    return repr(item) + ","


def format_python_black(item):
    code = format_python(item)
    return subprocess.check_output(["black", "-c", code], text=True).strip()


def format_yaml(item):
    data = {type(item).__name__: attr.asdict(item, recurse=True)}
    return yaml.dump([data], Dumper=yaml.SafeDumper)


FORMATTERS = {
    "python": format_python,
    "python-black": format_python_black,
    "yaml": format_yaml,
}


def run(args):
    with Source.get(args.src_url) as source:
        log.info("# Loaded source %s", args.src_url)

        formatter = FORMATTERS.get(args.format)

        itemcount = 0

        for pushitem in source:
            out = formatter(pushitem)
            log.info("%s", out)
            itemcount += 1

        log.info("# %s item(s) found in source", itemcount)


def main():
    log.setLevel(logging.INFO)

    parser = ArgumentParser(
        description="Report on all push items(s) available from a given source"
    )
    parser.add_argument(
        "--format",
        default="python-black",
        choices=["python", "python-black", "yaml"],
        help="Output format",
    )
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("src_url", help="Push source URL")

    p = parser.parse_args()

    if p.debug:
        logging.basicConfig(format="%(threadName)s %(message)s")
        log.setLevel(logging.DEBUG)
        logging.getLogger("pushsource").setLevel(logging.DEBUG)
    else:
        logging.basicConfig(format="%(message)s")

    run(p)


if __name__ == "__main__":
    main()
